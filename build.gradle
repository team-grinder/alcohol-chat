plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id "org.sonarqube" version "5.0.0.4638"
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.github.f4b6a3:uuid-creator:5.3.2'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

	//redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	// embedded redis
	implementation group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2'
}

sonar {
	properties {
		property "sonar.projectKey", "team-grinder_alcohol-chat"
		property "sonar.organization", "team-grinder"
		property "sonar.host.url", "https://sonarcloud.io/"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		xml.required = true
	}
}

//-- QueryDSL 설정
// sourceSets 섹션에서 main 소스셋에 생성된 Q타입 클래스 경로를 추가
def querydslSrcDir = 'build/generated/querydsl'
sourceSets {
	main {
		java {
			srcDirs += [querydslSrcDir]
		}
	}
}

// Q타입 클래스가 지정된 디렉토리에 생성
tasks.withType(JavaCompile).configureEach {
	options.generatedSourceOutputDirectory = file(querydslSrcDir)
}
